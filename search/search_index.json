{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Nothing to see here</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/tags/","title":"Tag Index","text":""},{"location":"blog/2025/03/30/hello-world/","title":"Hello World","text":"<p>A long time ago I used to write a small amount of words on the internet. Then I stopped. Now I am back to writing a small amount of words on the internet.</p> <p>Hello world! \ud83d\ude04</p>"},{"location":"blog/2025/03/31/low-code-vibes-to-chill-and-relax-to/","title":"Low code vibes to chill and relax to","text":"<p>Copilot - guy writing code at computer in a 90's neon fluorescent style</p> <p>LLM's have been an intensely controversial topic in recente years, some of the distaste is for good reason, some seems a little overblown. I've never really engaged with the debate personally and I still don't intend to. But I did want to share a recent experience of writing an open source project with the help of an LLM.</p> <p>I've used LLM's to assist me for several years generally to ask questions like: hey mr. robot tell me how to do this thing I have very little knowledge of. This usually gives me the wrong answer in varying degrees but also gives me a reasonable enough starting point to start the journey. Occasionally it nails it and I save myself a whole lot of time.</p> <p>Roughly a year or two ago I made my first full blown attempt to take my hands off the wheel and go hey mr. robot make me a whole webapp that does some boring stuff. I did so mostly to try out some tools like replit and aider which were new and exciting at the time. I didn't have great success, mostly what I created was a mess that barely started. Still kinda felt like the future but not especially useful.</p> <p>Time slipped by as it does and great strides have been made in the LLM space, so I decided to try again with Cursor and by extension Claude Sonnet 3.5 / 3.7. This time around I had been thinking about making a docker-socket-proxy as it was a problem I had been pondering but not critically important to me if it never happened.</p> <p>Well, this time around things went significantly better, as evidenced by the link to a real code repository. </p> <p>First can't vibe code without setting the vibe, this should do. I prompted it with a config schema and a Readme with an outline of the expected output, then let it get to work. Within a couple of hours I had a mostly functional prototype! I was pretty impressed!</p> <p>Here's a rough version of the original schema I started with...</p> <pre><code>rules:\n  acls:\n    - match:\n        path: \"/v1.*/networks\"\n        method: \"GET\"\n      action: \"deny\"\n      reason: \"Listing volumes is restricted\"\n\n  rewrites:\n    - match:\n        path: \"/v1.*/containers/create\"\n        method: \"POST\"\n      patterns:\n        - field: \"Env\"\n          action: \"upsert\"\n          value: \"FUN=yes\"\n        - field: \"Env\"\n          action: \"replace\"\n          match: \"DEBUG=true\"\n          value: \"DEBUG=false\"\n        - field: \"Env\"\n          action: \"delete\"\n          match: \"PANTS=*\"\n</code></pre> <p>I quickly realised that I could make the whole thing more powerful by collapsing the ACL and rewrite functions into a single <code>rules</code> key.</p> <pre><code>rules:\n  - match:\n      path: \"/v1.*/volumes\"\n      method: \"GET\"\n    actions:\n      - action: \"deny\"\n        reason: \"Listing volumes is restricted\"\n\n  - match:\n      path: \"/v1.*/containers/create\"\n      method: \"POST\"\n    actions:\n      - action: \"upsert\"\n        update:\n          Env:\n            - \"FUN=yes\"\n      - action: \"replace\"\n        contains:\n          Env:\n            - \"DEBUG=true\"\n        update:\n          Env:\n            - \"DEBUG=false\"\n      - action: \"delete\"\n        contains:\n          Env:\n            - \"PANTS=.*\"\n</code></pre> <p>Over the next couple of nights I adjusted the configuration schema and added another feature to enable propagating the proxy-socket to sub-containers. Things zoomed along until I hit around ~1500 lines of code, that's when it started to show signs of confusing itself and making questionable changes to otherwise working code. It was also starting to generate duplicate code and creating golang packages that didn't make an awful lot of sense. This was a bit of a nightmare on-top of the fact the initial code was pretty messy in the first place.</p> <p>I was able to get things back on-track again by...</p> <ol> <li>Manually getting rid of the worst of the duplicate code</li> <li>Manually refactoring the weird inconsistent packages it invented</li> <li>Ask the LLM to spend some time refactoring the most offensive files for better readability.</li> <li>Putting a greater emphasis on tests that ensured we weren't destroying functional behaviour.</li> </ol> <p>Once that was done I found success once more by being more specific about what context was needed as well as what needed to change. This next part went far slower and so slow that I am not really sure if I saved time, perhaps some on the basis I am a little out of practice writing go. All told I spent about 2-weeks of evenings here and there plugging away at it.</p> <p>There's still plenty of gross stuff in the code base, but for now I've got a working tool that is not entirely a war crime. I'm pleased that it was able to make docker-socket-proxy exist and the jump from where we were a couple of years ago to now with LLM coding is pretty massive.</p> <p>Some notes I would leave to myself about trying this next time are...</p> <ul> <li>You need to either let the AI write the tests or the implementation but not both. You have to be certain one of those things works as intended first. It's a good argument for TDD.</li> <li>Refactor early and often to try and reduce the number of unconstrained vibes that need reigning in.</li> <li>Fight the urge to accept legitimate looking vibes that you have not adequately code reviewed. Treat the LLM changes like you would a PR, a reasonable level of scrutiny before accepting the changes.</li> </ul>"},{"location":"blog/archive/2025/","title":"March 2025","text":""},{"location":"blog/category/technology/","title":"Technology","text":""},{"location":"blog/category/other/","title":"Other","text":""}]}